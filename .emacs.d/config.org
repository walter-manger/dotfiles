#+STARTUP: overview
* Interface

#+BEGIN_SRC emacs-lisp

  ;; remove UI components that I don't want to see
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; no startup commentary
  (setq inhibit-startup-message t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t)

  (global-auto-revert-mode t)
  (global-visual-line-mode 1)

  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

  (if (member "Hack" (font-family-list))
      (set-default-font "Hack")
      (message "Hack font not found, go get it"))

  (defvar font-size)
  (setq font-size 110)

  (when (> (x-display-pixel-width) 1366)
    (setq font-size 170))

  (set-face-attribute 'default nil :height font-size)
  (set-face-attribute 'fixed-pitch nil :height font-size)

  (global-hl-line-mode 1)
  ;; (set-face-attribute 'hl-line nil :foreground nil :background "#111" :inherit nil)

  (setq display-time-day-and-date t)

  (defvar display-time-24hr-format)
  (setq display-time-24hr-format nil)

  ;;(display-time)

  (show-paren-mode 1)
  (column-number-mode t) ;; Yea, show column numbers too

  ;; I need to split this out

  (use-package skewer-mode
    :disabled t
    :ensure t)

  (use-package powerline
    :disabled t
    :ensure t)

  (use-package projectile
    :ensure t)

  (use-package helm-projectile
    :ensure t)

  (use-package color-theme-sanityinc-solarized
    :disabled t
    :ensure t)

  (use-package solarized-theme
    :ensure t)

  ;; Themes
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'solarized-dark t)

#+END_SRC
  
* Try 

#+BEGIN_SRC emacs-lisp

  (use-package try 
    :ensure t)

#+END_SRC 
  
* Dired

  When I have two dired windows open, if I invoke Rename on a file, rename it to the other Dired directory.

  #+BEGIN_SRC emacs-lisp

    (setq dired-dwim-target t)
      
  #+END_SRC

* Which Key

#+BEGIN_SRC emacs-lisp

  (use-package which-key 
    :ensure t 
    :config 
    (which-key-mode))

#+END_SRC

* Web

#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t)

#+END_SRC

* JavaScript

#+BEGIN_SRC emacs-lisp

  (use-package tern
    :diminish " T"
    :init (add-hook 'web-mode-hook 'tern-mode)
    :ensure t)

  (use-package tern-auto-complete
    :ensure t)

#+END_SRC

* Ediff

#+BEGIN_SRC emacs-lisp


  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; (defun wm-ediff-hook ()
  ;;   (ediff-setup-keymap)
  ;;   (define-key ediff-mode-map "j" 'ediff-next-difference)
  ;;   (define-key ediff-mode-map "k" 'ediff-previous-difference))

  ;; (add-hook 'ediff-mode-hook 'wm-ediff-hook)


#+END_SRC

* Spaceline

#+BEGIN_SRC emacs-lisp

  (setq ns-use-srgb-colorspace nil)
  (setq powerline-default-separator 'arrow)
  (setq powerline-height 28)

  (use-package spaceline-config
    :ensure spaceline
    :config
    (spaceline-spacemacs-theme)
    (spaceline-helm-mode)
    (setq spaceline-minor-modes-separator " "))

#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp

  (use-package helm
    :ensure t)

  (helm-autoresize-mode 1)
  (setq helm-display-header-line nil)
  (setq helm-autoresize-max-height 30)
  (setq helm-autoresize-min-height 30)
  (setq helm-split-window-in-side-p t)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x b") 'helm-mini)

  (setq helm-M-x-fuzzy-match t)
  (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match    t)

  (helm-mode 1)

  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (add-to-list 'projectile-globally-ignored-directories "build/js")
  (add-to-list 'projectile-globally-ignored-directories "docs/dash")
  (add-to-list 'projectile-globally-ignored-directories "vendor")
  (helm-projectile-on)

  (use-package helm-ag
    :ensure t)

  (use-package swiper-helm
    :ensure t)

#+END_SRC

* Scheme

#+BEGIN_SRC emacs-lisp
  (setq scheme-program-name "/usr/local/bin/scheme/mit-scheme")
  (setq geiser-default-implementation 'scheme)
#+END_SRC

* Yasnippet
  
#+BEGIN_SRC emacs-lisp

  ;; TODO: Make repos standard across environments
  (use-package yasnippet
    :ensure t
    :config
    (progn 
      (setq yas-snippet-dirs
            '("~/.emacs.d/snippets"                 ;; personal snippets
              "~/repos/yasnippet-snippets"          ;; the default collection
      ))
      (yas-global-mode 1)
      )
  )

#+END_SRC

* Flycheck

#+BEGIN_SRC emacs-lisp

  (use-package flycheck
    :ensure t
    :defer t
    :config
    (setq-default flycheck-emacs-lisp-load-path 'inherit)
    ;;(setq flycheck-jscs-esprima "=esprima-fb")
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint)))
    (add-hook 'after-init-hook #'global-flycheck-mode)
    (flycheck-add-mode 'javascript-eslint 'web-mode))

#+END_SRC

* Orgmode

#+BEGIN_SRC emacs-lisp

  (use-package org
    :ensure t
    :bind 
    (("C-c c" . org-capture)
     ("C-c a" . org-agenda)
     ("C-c l" . org-store-link)))

  (global-set-key (kbd "C-c n")
                  (lambda ()
                    (interactive)
                    (find-file "~/Dropbox/Org/notes.org")))

  (global-set-key (kbd "C-c w")
                  (lambda ()
                    (interactive)
                    (find-file "~/Dropbox/Org/work.org")))


  ;;(add-hook 'text-mode-hook 'turn-on-auto-fill)

  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.04))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.03))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.02))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.01))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
   '(org-code ((t (:family "Hack"))))
   '(org-table ((t (:family "Hack"))))
   )

  ;; How about trying out publishing to see if I can
  ;; replace the need for a blog engine

  (use-package org-bullets
    :diminish org-bullets-mode
    :ensure t
    :defer t)

  (defvar org-work-file)
  (setq org-work-file "~/Dropbox/Org/work.org")

  (setq org-log-done t)

  (setq org-default-notes-file "~/Dropbox/org/notes.org")

  (setq org-agenda-files (list "~/Dropbox/org/notes.org"
                               "~/Dropbox/org/blog.org"
                               "~/Dropbox/org/work.org"))

  (setq org-archive-location (concat org-directory "/notes-archive"))

  ;; fontify code in code blocks
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sh         . t)
     (js         . t)
     (emacs-lisp . t)
     (clojure    . t)
     (python     . t)
     (C          . t)
     (dot        . t)
     (scheme        . t)
     (css        . t)))

  ;; use org-bullets in org-mode
  (add-hook 'org-mode-hook (lambda ()
                             (org-bullets-mode 1)
                             (variable-pitch-mode t)
                             ))

  (defvar org-capture-templates)
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
           "* TODO %?" :prepend t)
          ("n" "Note" entry (file+headline org-default-notes-file "Notes")
           "* %?")
          ("b" "Blog Idea" entry (file+headline org-default-notes-file "Blog Ideas")
           "* %?")
          ("z" "Work Task" entry (file+headline org-work-file "Work Tasks")
           "* TODO %?" :prepend t)
          ("l" "Listen" entry (file+headline org-default-notes-file "Listen")
           "* %?")
          ("r" "Read" entry (file+headline org-default-notes-file "Read")
           "* %?")
          ("w" "Watch" entry (file+headline org-default-notes-file "Watch")
           "* %?")
          ("W" "Work Note" entry (file+headline org-work-file "Work Notes")
           "* %?")
          ("p" "Post" plain (file (wm/hugo-new))
           (file "~/.emacs.d/org-templates/blogpost.orgcaptmpl"))
          ))

  (setq org-columns-default-format
        "%25ITEM %TODO %3PRIORITY %10CLOCKSUM(Total Time) %CLOCKSUM_T(Time Today)")

  ;; Not really using this anymore, but perhaps I should?
  (use-package harvest
    :ensure t)

  (require 'harvest)
  ;; (add-hook 'org-clock-in-hook 'harvest)
  ;; (add-hook 'org-clock-out-hook 'harvest-clock-out)

  (setq org-return-follows-link t)


#+END_SRC

* Evil

#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-u-scroll t)

  (use-package evil
    :ensure t
    :config
      ;; Cursor Colors
      (setq evil-emacs-state-cursor '("red" box))
      (setq evil-normal-state-cursor '("darkgray" box))
      (setq evil-visual-state-cursor '("orange" box))
      (setq evil-insert-state-cursor '("red" bar))
      (setq evil-replace-state-cursor '("red" bar))
      (setq evil-operator-state-cursor '("red" hollow))
      ;; ESC Quits
      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
      ;; Window Management
      (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
      (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
      (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
      (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
      ;; Always use Evil if I can
      (evil-mode t))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp

  (use-package magit 
    :ensure t 
    :bind ("C-x g" . magit-status))

#+END_SRC

* Git Gutter

#+BEGIN_SRC emacs-lisp

  (use-package git-gutter
      :ensure t
      :diminish git-gutter-mode  
      :config
      (global-git-gutter-mode t)
  )

#+END_SRC

* EShell

#+BEGIN_SRC emacs-lisp

  (use-package eshell
    :ensure t)

  (defun eshell/clear ()
    "Clear like most terminal emulators."
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))

#+END_SRC

* Smartparens

#+BEGIN_SRC emacs-lisp

  (use-package smartparens-config
    :diminish smartparens-mode
    :ensure smartparens
    :config 
    (progn 
      (show-smartparens-global-mode t)))

  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)

  (sp-pair "{" nil :post-handlers '((wm/create-newline-and-enter-sexp "RET")))

  (defun wm/create-newline-and-enter-sexp (&rest _ignored)
    "Open a new brace or bracket expression, with relevant newlines and indent. "
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))

#+END_SRC

* Helm-Dash

#+BEGIN_SRC emacs-lisp

  (use-package helm-dash
     :ensure t)

  (setq helm-dash-browser-func 'eww)

#+END_SRC

* Smart Mode Line

#+BEGIN_SRC emacs-lisp

  (use-package smart-mode-line
    :disabled t
    :ensure t
    :config
    (setq sml/no-confirm-load-theme t)
    (setq sml/theme 'respectful)
    (sml/setup))

#+END_SRC

* Wakatime

#+BEGIN_SRC emacs-lisp

  (setq wakatime-api-key "33c08473-7680-4203-b97d-64120cd743c1")
  (setq wakatime-cli-path "/usr/local/bin/wakatime")

  (when (eq (window-system) 'ns) (global-wakatime-mode))

#+END_SRC

* Twitter

#+BEGIN_SRC emacs-lisp

  (use-package twittering-mode
    :ensure t
    :defer t)

#+END_SRC
 
* Yaml

#+BEGIN_SRC emacs-lisp

  (use-package yaml-mode
    :ensure t
    :defer t)

#+END_SRC

* Golang
  
  Perhaps take some from here:
  http://arenzana.org/2015/Emacs-for-Go/

  Maybe go-guru?
  https://docs.google.com/document/d/1_Y9xCEMj5S-7rv2ooHpZNH15JgRT5iM742gJkw5LtmQ/edit

  https://www.youtube.com/watch?v=ak97oH0D6fI

  This guy's config too:
  http://www.tomcraven.io/post/my-go-development-environment/

#+BEGIN_SRC emacs-lisp

   (use-package go-mode
    :ensure t 
    :config (add-hook 'go-mode-hook
                (lambda ()
                  (flycheck-mode)
                  (go-eldoc-setup)
                  ;; (local-set-key (kbd "M-.") 'godef-jump)
                  (load-file "$HOME/.emacs.d/site-lisp/go/go-guru.el")
                  (require 'go-guru)
                  ;; (setq gofmt-command "goimports")
                  (add-hook 'before-save-hook 'gofmt-before-save)
                  (setq-local helm-dash-docsets '("Go"))
                  (setq go-play-browse-function 'browse-url))
  ))

  (use-package go-eldoc
    :ensure t)

  (use-package go-autocomplete
    :ensure t)

  (use-package gotest
    :ensure t
    :bind (("C-c , m" . go-test-current-file)
           ("C-c , s" . go-test-current-test)
           ("C-c , a" . go-test-current-project)))

#+END_SRC

* Diminish
  
Unicodes
https://unicode-table.com/en/#miscellaneous-technical

http://tromey.com/blog/?p=831

#+BEGIN_SRC emacs-lisp

  (diminish 'undo-tree-mode)
  (diminish 'yas-minor-mode)
  (diminish 'buffer-face-mode)
  (diminish 'projectile-mode)
  (diminish 'auto-revert-mode)
  (diminish 'auto-fill-mode)
  (diminish 'eldoc-mode (string 32 #x24BA))
  (diminish 'tern-mode (string 32 #x24C9))
  (diminish 'auto-complete-mode (string 32 #x24B6))
  (diminish 'wakatime-mode (string 32 #x24CC))
  (diminish 'helm-mode)
  (diminish 'buffer-face-mode)
  (diminish 'which-key-mode)
  (diminish 'auto-fill-function)
  (diminish 'visual-line-mode)

#+END_SRC

* ERC

#+BEGIN_SRC emacs-lisp


  (use-package erc)

  ;; joining && autojoing

  ;; make sure to use wildcards for e.g. freenode as the actual server
  ;; name can be be a bit different, which would screw up autoconnect
  (erc-autojoin-mode t)

  (setq erc-autojoin-channels-alist
    '((".*\\.freenode.net" "#emacs")
       (".*\\.gimp.org" "#unix")))

  ;; check channels
  (erc-track-mode t)

  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"

                                   "324" "329" "332" "333" "353" "477"))
  ;; don't show any of this
  (setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))

  (defun djcb-erc-start-or-switch ()
    "Connect to ERC, or switch to last active buffer."
    (interactive)
    (if (get-buffer "irc.freenode.net:6667") ;; ERC already active?

      (erc-track-switch-buffer 1) ;; yes: switch to last active
      (when (y-or-n-p "Start ERC? ") ;; no: maybe start ERC
        (erc :server "irc.freenode.net" :port 6667 :nick "cswm" :full-name "cswm")
        (erc :server "irc.gimp.org" :port 6667 :nick "cswm" :full-name "cswm"))))

  (global-set-key (kbd "C-c e") 'djcb-erc-start-or-switch) ;; ERC

#+END_SRC
 
* REST
  
#+BEGIN_SRC emacs-lisp

  (defvar settings-dir)
  (defvar defuns-dir)

  (setq settings-dir
        (expand-file-name "settings/" user-emacs-directory))

  ;; set up the settings folder
  (add-to-list 'load-path settings-dir)

  ;; keep custom settings out of init.el
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)

  (defun flycheck-list-errors-only-when-errors ()
    "Open a error list buffer when there are errors to consider."
    (if flycheck-current-errors
        (flycheck-list-errors)
      (-when-let (buffer (get-buffer flycheck-error-list-buffer))
        (dolist (window (get-buffer-window-list buffer))
          (quit-window nil window)))))

  (require 'auto-complete-config)

  (use-package auto-complete
    :ensure t
    :config
      (ac-config-default)
    )

  ;; Use Emacs terminfo, not system terminfo
  (setq system-uses-terminfo nil)

  (use-package multi-term
    :config
    (setq multi-term-program "/bin/zsh"))

  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

  (defun set-exec-path-from-shell-PATH ()
    "Get the shell path from PATH."
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$"
                            ""
                            (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq eshell-path-env path-from-shell)
      (message "%s" (propertize path-from-shell 'face '(:foreground "red")))
      (setq exec-path (split-string path-from-shell path-separator))))

  ;;(when (eq (window-system) 'ns) (set-exec-path-from-shell-PATH))


  (add-hook 'term-mode-hook
      (lambda ()
        (setq term-buffer-maximum-size 10000)))

  (add-hook 'dired-mode-hook (lambda ()
                               (dired-hide-details-mode 1)))

  (use-package json-mode
    :ensure t)

  ;; Whitespace
  (setq-default fill-column 80)
  (setq-default default-tab-width 2)
  (setq-default evil-shift-width 2)
  (setq-default indent-tabs-mode nil)

  (electric-indent-mode 1)

  (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.scss$" . sass-mode))
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))

  (defun wm/web-mode-hook()
    "Web-Mode Hook"
    (setq web-mode-code-indent-offset 2)
    (add-hook 'before-save-hook #'flycheck-list-errors-only-when-errors)
    (setq-local helm-dash-docsets '("react" "javascript")))

  (defun wm/js2-mode-hook()
    "js2 Hook"
    (js2-minor-mode 1)
    (add-hook 'before-save-hook #'flycheck-list-errors-only-when-errors)
    (setq-local helm-dash-docsets '("react" "javascript")))

  (defun wm/sass-mode-hook()
    "sass Hook"
    (setq sass-indent-offset 2))

  (setq js2-highlight-level 3)

  (add-hook 'web-mode-hook 'wm/web-mode-hook)
  (add-hook 'sass-mode-hook 'wm/sass-mode-hook)
  (add-hook 'js2-mode-hook 'wm/js2-mode-hook)

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
   
  (setq make-backup-files nil)

  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

  (setq ispell-program-name "/usr/local/bin/aspell")

  ;; defuns (load all files in defuns-dir)
  (setq defuns-dir (expand-file-name "defuns" user-emacs-directory))
  (dolist (file (directory-files defuns-dir t "\\w+"))
    (when (file-regular-p file)
      (load file)))

  (use-package server
    :init
    (if (and (fboundp 'server-running-p) 
            (not (server-running-p)))
        (server-start)))

  (defun set-exec-path-from-shell-PATH ()
    "Get the shell path from PATH."
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$"
                            ""
                            (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq eshell-path-env path-from-shell)
      (message "%s" (propertize path-from-shell 'face '(:foreground "red")))
      (setq exec-path (split-string path-from-shell path-separator))))

  (when (eq (window-system) 'ns) (set-exec-path-from-shell-PATH))

  (add-hook 'term-mode-hook
      (lambda ()
        (setq term-buffer-maximum-size 10000)))

  (add-hook 'dired-mode-hook (lambda ()
                               (dired-hide-details-mode 1)))

  ;; Whitespace
  (setq-default fill-column 80)
  (setq-default default-tab-width 2)
  (setq-default evil-shift-width 2)
  (setq-default indent-tabs-mode nil)

  (electric-indent-mode 1)


  (setq js2-highlight-level 3)

  (add-hook 'web-mode-hook 'wm/web-mode-hook)
  (add-hook 'sass-mode-hook 'wm/sass-mode-hook)
  (add-hook 'js2-mode-hook 'wm/js2-mode-hook)

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
   
  (setq make-backup-files nil)

  (use-package rainbow-delimiters
    :ensure t
    :config
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  ;; Let's edit all text in Emacs please
  (use-package edit-server
    :ensure t) 

  (edit-server-start)
  ;;(server-start)

  ;; Go-Test needs some color when using Ginkgo
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (message "Colorize Happening")
    (toggle-read-only)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

#+END_SRC

 
* Clojure

#+BEGIN_SRC emacs-lisp

  (use-package cider
    :defer t
    :ensure t)

#+END_SRC
